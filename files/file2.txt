This sample demonstrates the use of the Autofill framework from the service side and the client side. In practice, only a small handful of apps will develop Autofill services because a device will only have one service as default at a time, and there is just a small number of 3rd-party apps providing these services (typically password managers). However, all apps targeting O with any autofillable fields should follow the necessary steps to 1) ensure their views can be autofilled and 2) optimize their autofill performance. Most of the time, there is little to no extra code involved, but the use of custom views and views with virtual child views requires more work.

The sample's Autofill service is implemented to parse the client's view hierarchy in search of autofillable fields that it has data for. If such fields exist in the hierarchy, the service sends data suggestions to the client to autofill those fields. The client uses the following attributes to specify autofill properties: importantForAutofill, autofillHints, and autofillType. importantForAutofill specifies whether the view is autofillable. autofillHints is a list of strings that hint to the service what data to fill the view with. This sample service only supports the hints listed here with the prefix AUTOFILL_HINT_*. autofillType tells the service the type of data it expects to receive (i.e. a list index, a date, or a string). Specifying autofillType is only necessary when implementing a custom view since all of the provided widgets in the UI toolkit do this for you.

To set the device's default Autofill service to the one in the sample, edit Settings > System > Languages & Input > Advanced > Auto-fill service and select the sample app. To edit the service's settings, tap the settings icon next to the Auto-fill service list item or open the Autofill Settings launcher icon.. Here, you can set whether you want to enable authentication on the entire autofill Response or just on individual autofill datasets. You should also set the master password to “unlock” authenticated autofill data with.

Note: This sample service stores all autofill data in SharedPreferences and thus is not secure. Be careful about what you store when experimenting with the sample because anyone with root access to your device will be able to view your autofill data.

The client side of the app has three Activities that each have autofillable fields. The first Activity uses standard views to comprise a login form. Very little needs to be done by the client app to ensure the views get autofilled properly. The second Activity uses a custom view with virtual children, meaning some autofillable child views are not known to the View hierarchy to be child views. Supporting autofill on these child views is a little more involved.